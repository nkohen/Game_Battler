/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GameBattler;
import javax.swing.JOptionPane;
/**
 * This is the GUI for Game Battler.
 * @author Nadav
 */
public class Interface extends javax.swing.JFrame {//Needs work
    static Team left;
    static Team right;
    static Integer r = 10;
    static AI ai = null;
    static int turn = 1;
    static Move move;
    static Fighter s;
    
    /**
     * Creates a new Game.
     */
    public Interface() {
        left = new Team();
        right = new Team(left);
        left.setEnemyTeam(right);
        
        int gameSize = getGameSize();
        for(int i = 0; i<gameSize;i++)
        {
            left.add(getType(left.name));
            right.add(getType(right.name));
            displayTeams(left);
        }
        
        AI.strat = Strategy.HPWEIGHT;
        
        initComponents();
        showButtons();
    }
    
    /**
     * Displays a Team and its enemy.
     * @param t Team to be displayed with their enemyTeam.
     */
    public static void displayTeams(Team t)
    {
        String teams = t.name + ":\n" + t + "\n";
        teams += "\n" + t.enemyTeam.name + ":\n" + t.enemyTeam + "\n";
        teams += "\nSelect OK when you are ready to choose a Fighter.";
        JOptionPane.showMessageDialog(null, teams);
    }
    
    /**
     * Asks the user for a Fighter type.
     * @param teamName The Team that will be asked.
     * @return A new Fighter of the type chosen.
     */
    public static Fighter getType(String teamName)
    {
        boolean flag = true;
        Fighter f = null;
        Object[] possibilities = {"Knight", "Wizard"};
        while(flag)
        {
            String str = (String) JOptionPane.showInputDialog(
                null,
                teamName + ", what type of Fighter do you want? Remember, order matters!",
                "Choose",
                JOptionPane.QUESTION_MESSAGE,
                null,
                possibilities,
                possibilities[0]);
            if(str == null)
                JOptionPane.showMessageDialog(null, "Please select a Fighter.");
            else if(str.equals("Knight"))
            {
                f = new Knight();
                flag = false;
            }
            else if(str.equals("Wizard"))
            {
                f = new Wizard();
                flag = false;
            }
            else
                JOptionPane.showMessageDialog(null, "Please select a Fighter.");
        }
        return f;
    }
    
    /**
     * Asks for the number of Fighters that will be on each Team for this game.
     * Note that if this is greater than 4, the AI tends to not finish it's decision.
     * @return The number of Fighters to be used on each Team.
     */
    public static int getGameSize()
    {
        boolean flag = true;
        int n = 0;
        while(flag)
        {
            String s = JOptionPane.showInputDialog(null, "How many Fighters on each Team?", "Game Size", JOptionPane.QUESTION_MESSAGE);
            try{
                n = Integer.parseInt(s);
            }
            catch(Exception e){}
            if(n<=0)
                JOptionPane.showMessageDialog(null, "Please enter a number.");
            else
                flag = false;
        }
        return n;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Melee_Flame = new javax.swing.JButton();
        panel = new GamePanel()
        ;
        Heal_GroupHeal = new javax.swing.JButton();
        Sacrifice_Fireworks = new javax.swing.JButton();
        Switch = new javax.swing.JButton();
        Fumes = new javax.swing.JButton();
        HelpButton = new javax.swing.JButton();
        DisplayTeams = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Melee_Flame.setText("Melee");
        Melee_Flame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Melee_FlameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1300, Short.MAX_VALUE)
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 556, Short.MAX_VALUE)
        );

        Heal_GroupHeal.setText("Heal");
        Heal_GroupHeal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Heal_GroupHeal_GroupHealActionPerformed(evt);
            }
        });

        Sacrifice_Fireworks.setText("Sacrifice");
        Sacrifice_Fireworks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Sacrifice_FireworksActionPerformed(evt);
            }
        });

        Switch.setText("Switch Fighter");
        Switch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SwitchActionPerformed(evt);
            }
        });

        Fumes.setText("Fumes");
        Fumes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FumesActionPerformed(evt);
            }
        });

        HelpButton.setText("Instructions");
        HelpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HelpButtonActionPerformed(evt);
            }
        });

        DisplayTeams.setText("Show Team Details");
        DisplayTeams.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DisplayTeamsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(Melee_Flame)
                .addGap(100, 100, 100)
                .addComponent(Sacrifice_Fireworks)
                .addGap(100, 100, 100)
                .addComponent(Heal_GroupHeal)
                .addGap(100, 100, 100)
                .addComponent(Fumes)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(DisplayTeams)
                .addGap(100, 100, 100)
                .addComponent(HelpButton)
                .addGap(100, 100, 100)
                .addComponent(Switch)
                .addGap(50, 50, 50))
            .addComponent(panel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Melee_Flame)
                        .addComponent(Sacrifice_Fireworks))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Switch)
                        .addComponent(Heal_GroupHeal)
                        .addComponent(Fumes)
                        .addComponent(HelpButton)
                        .addComponent(DisplayTeams)))
                .addGap(21, 21, 21)
                .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Melee_FlameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Melee_FlameActionPerformed
        Fighter f = left.active();
        if(f instanceof Knight)
            move = Move.MELEE;
        else if(f instanceof Wizard)
            move = Move.FLAME;
        s = null;
        buttonPressed();
    }//GEN-LAST:event_Melee_FlameActionPerformed

    private void Sacrifice_FireworksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Sacrifice_FireworksActionPerformed
        Fighter f = left.active();
        if(f instanceof Knight)
            move = Move.SACRIFICE;
        else if(f instanceof Wizard)
            move = Move.FIREWORKS;
        s = null;
        buttonPressed();
    }//GEN-LAST:event_Sacrifice_FireworksActionPerformed

    private void Heal_GroupHeal_GroupHealActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Heal_GroupHeal_GroupHealActionPerformed
        Fighter f = left.active();
        if(f instanceof Knight)
            move = Move.HEAL;
        else if(f instanceof Wizard)
            move = Move.GROUPHEAL;
        s = null;
        buttonPressed();
    }//GEN-LAST:event_Heal_GroupHeal_GroupHealActionPerformed

    private void SwitchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SwitchActionPerformed
        Fighter f = Battle.choose(left,1);
        if(f == null)
            return;
        left.switchActive(f);
        relabelButtons();
        move = Move.SWITCH;
        s = f;
        buttonPressed();
    }//GEN-LAST:event_SwitchActionPerformed

    private void FumesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FumesActionPerformed
        Fighter f = left.active();
        if(f instanceof Wizard)
            move = Move.FUMES;
        s = null;
        buttonPressed();
    }//GEN-LAST:event_FumesActionPerformed

    private void HelpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HelpButtonActionPerformed
        String str = "The object of this game is to kill all enemy fighters.\n\nYou and the computer will take turns attacking each other using your active fighter\nAll fighters begin with 100 HP\nWhen an active fighter dies, the next fighter up will replace him\nYou may use a turn to replace your active fighter with another one of your fighters by using Switch Fighter";
        javax.swing.JOptionPane.showMessageDialog(null, str);
        str = "Fighter Type: Knight\n\nMelee - 40 physical damage to the opponent\nSacrifice - Both this knight and the opponent are killed\nHeal - This knight is healed 30\n\nKnights take half damage on physical attacks";
        javax.swing.JOptionPane.showMessageDialog(null, str);
        str = "Fighter Type: Wizard\n\nFlame - 40 magic damage to the opponent\nFireworks - 20 magic damage to every fighter on the enemy team\nGroup Heal - All of your fighters are healed 15\nFumes - All fighters on the enemy team will take 5 pure damage every turn for 4 turns\n\nWizards take half damage on magic attacks";
        javax.swing.JOptionPane.showMessageDialog(null, str);
        str = "If you ever wish to see the numeric details of the Fighters, click on Show Team Details.";
        javax.swing.JOptionPane.showMessageDialog(null, str);
    }//GEN-LAST:event_HelpButtonActionPerformed

    private void DisplayTeamsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DisplayTeamsActionPerformed
        Battle.displayTeams(left);
    }//GEN-LAST:event_DisplayTeamsActionPerformed
    
    private void relabelButtons()
    {
        if(left.active() instanceof Knight)
        {
            Melee_Flame.setText("Melee");
            Sacrifice_Fireworks.setText("Sacrifice");
            Heal_GroupHeal.setText("Heal");
            Fumes.setVisible(false);
        }
        else if(left.active() instanceof Wizard)
        {
            Melee_Flame.setText("Flame");
            Sacrifice_Fireworks.setText("Fireworks");
            Heal_GroupHeal.setText("Group Heal");
            Fumes.setVisible(true);
        }
    }
    
    private void hideButtons()
    {
        Melee_Flame.setVisible(false);
        Sacrifice_Fireworks.setVisible(false);
        Heal_GroupHeal.setVisible(false);
        Fumes.setVisible(false);
        Switch.setVisible(false);
        HelpButton.setVisible(false);
        DisplayTeams.setVisible(false);
        panel.repaint();
    }
    
    private void showButtons()
    {
        Melee_Flame.setVisible(true);
        Sacrifice_Fireworks.setVisible(true);
        Heal_GroupHeal.setVisible(true);
        Fumes.setVisible(true);
        Switch.setVisible(true);
        HelpButton.setVisible(true);
        DisplayTeams.setVisible(true);
        relabelButtons();
        panel.repaint();
    }
    
    private void buttonPressed()
    {
        hideButtons();
        boolean end = doTurn(left, move);
        if(end)
        {
            panel.repaint();
            return;
        }
        if(turn == 1)
            ai = new AI(right);
        else
            ai.updateTree(move, s);
        move = ai.move;
        s = ai.switched;
        displayMove(move, s);
        if(move == Move.SWITCH)
            right.switchActive(s);
        end = doTurn(right, move);
        if(end)
        {
            panel.repaint();
            return;
        }
        showButtons();
    }
    
    /**
     * Executes a turn in this game.
     * @param t The Team whose turn it is.
     * @param m The Move performed by t.active().
     * @return True if the game is over
     */
    public static boolean doTurn(Team t, Move m)
    {
        if(m != Move.SWITCH)
            doMove(t,m);
        t.activateEffects();
        t.enemyTeam.activateEffects();
        t.buryDead();
        t.enemyTeam.buryDead();
        if (t.isEmpty() || t.enemyTeam.isEmpty())
            return true;
        return false;
    }
    
    /**
     * Executes the Move performed on a turn.
     * @param t The Team whose turn it is.
     * @param m The Move performed by t.active().
     */
    public static void doMove(Team t, Move m)
    {
        Fighter p = t.active();
        Fighter opp = t.enemyTeam.active();
        switch(m)
        {
            case MELEE: 
                ((Knight)p).melee(opp);
                break;
            case SACRIFICE:
                ((Knight)p).sacrifice(opp);
                break;
            case HEAL: 
                ((Knight)p).heal();
                break;
            case FLAME: 
                ((Wizard)p).flame(opp);
                break;
            case FIREWORKS: 
                ((Wizard)p).fireworks(t.enemyTeam);
                break;
            case GROUPHEAL: 
                ((Wizard)p).groupHeal(t);
                break;
            case FUMES: 
                ((Wizard)p).fumes(t.enemyTeam);
                break;
            case FIRST:
                JOptionPane.showMessageDialog(null, "You forgot to initialize move...");
                break;
            default:
                JOptionPane.showMessageDialog(null, "You forgot a break...");
        }
    }
    
    /**
     * Displays the enemy's move in a Message JDialog.
     * @param m The Move done by the enemy.
     * @param s The Fighter switched to if m == Move.SWITCH, null otherwise.
     */
    public static void displayMove(Move m, Fighter s)
    {
        if(m != Move.SWITCH)
            JOptionPane.showMessageDialog(null, "The enemy has used " + m.getName());
        else
            JOptionPane.showMessageDialog(null, "Enemy has switched to\n" + s);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton DisplayTeams;
    private javax.swing.JButton Fumes;
    private javax.swing.JButton Heal_GroupHeal;
    private javax.swing.JButton HelpButton;
    private javax.swing.JButton Melee_Flame;
    private javax.swing.JButton Sacrifice_Fireworks;
    private javax.swing.JButton Switch;
    private java.awt.Panel panel;
    // End of variables declaration//GEN-END:variables
}